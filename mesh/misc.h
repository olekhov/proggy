#ifndef __MISC_FUNCTIONS__
#define __MISC_FUNCTIONS__
 
//
// Функции, не имеющие прямого отношения к построению
// триангуляции. В основном, это геометрические вычисления
 
#include "vars.h"
 
//
// Площадь треугольника (na,nb,nc) через векторное произведение, со знаком
double area(struct nod *na, struct nod *nb, struct nod *nc);
//
// расстояние между узлами
double dist(struct nod *na, struct nod *nb);
//
// Поиск элемента, которому может принадлежать узел (внутри треугольника)
int in_elem(struct nod *n);
//
// Вычисление радиусов вписанной и описанной окружностей
void circles(int e);
//
// "Релаксация":
// Выравнивание количества элементов в узлах
void relax();
//
// смена ролей (a,b)<->(c,d). см. рисунок output2.gif
void swap_side(int s);
//
// Вычисление параметра F для нового узла путем линейной интерполяции
// по значениям F в узлах элемента
void spacing(int e, int n);
//
// Diamond-check:
// если два соседних элемента окружены четырмя хорошими (или отсутствующими),
// то оба помечаются как хорошие.
void diamond();
//
// Стирание элементов, сторон и узлов, помеченных как OFF
void erase();
//
// Вычисление количества смежных элементов для каждого узла
// для relax и smooth
void neighbours();
//
// Сглаживание: каждый узел перемещается в центр своей ячейки, 10 раз
void smooth();
//
// Пометка элементов согласно материалам.
void materials();
//
// Классификация элементов: поиск самого плохого
int classify();
//
// проверка и приведение триангуляции к виду Делоне
void bowyer(int n, int spac);

extern double g_ratio; 
#endif
